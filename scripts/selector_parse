#!/usr/bin/env bash

__rvm_ruby_string_fuzzy_remote_for()
{
  typeset new_ruby_string
  new_ruby_string="$(
    __list_remote_$1_for $( __rvm_system_path_for ${2:-$1} ) |
    __rvm_awk -F/ '{x=$NF; gsub(".tar.*","",x); gsub("jruby-bin","jruby",x); print x}' |
    __rvm_grep "${rvm_ruby_string/rbx/rubinius}" |
    sort | __rvm_tail -n 1
  )"
  rvm_ruby_string="${new_ruby_string:-$rvm_ruby_string}"
}

__rvm_ruby_string_fuzzy_remote()
{
  case "${rvm_ruby_string}" in
    (jruby*)         __rvm_ruby_string_fuzzy_remote_for jruby ;;
    (rbx*|rubinius*) __rvm_ruby_string_fuzzy_remote_for rbx   ;;
    (ruby*)          __rvm_ruby_string_fuzzy_remote_for ruby rubies ;;
    (*)
      rvm_error "Do not know how to find binary for ${rvm_ruby_string}"
      return 1
      ;;
  esac
  true
}

__rvm_ruby_string_fuzzy()
{
  typeset new_ruby_string
  new_ruby_string="$(
    "${rvm_scripts_path:-$rvm_path/scripts}/list" strings |
      __rvm_grep "${rvm_ruby_string}" |
      sort | __rvm_tail -n 1
  )"
  rvm_ruby_string="${new_ruby_string:-$rvm_ruby_string}"
}

__rvm_ruby_string_parse()
{
  if
    (( ${rvm_fuzzy_flag:-0} == 1 )) &&
    [[ ! -d "${rvm_rubies_path}/${rvm_ruby_string}" ]]
  then
    if (( ${rvm_remote_flag:-0} == 1 ))
    then __rvm_ruby_string_fuzzy_remote || return $?
    else __rvm_ruby_string_fuzzy        || return $?
    fi
  fi

  typeset ruby_string gemset_name expanded_alias_name repo_url branch_name ruby_name

  # Stash the ruby string.
  ruby_string="${rvm_ruby_string:-}"
  gemset_name="${rvm_gemset_name:-}"
  repo_url="${rvm_ruby_repo_url:-}"
  branch_name="${rvm_ruby_repo_branch:-}"
  ruby_name="${rvm_ruby_name:-}"

  __rvm_unset_ruby_variables

  rvm_ruby_repo_url="${repo_url:-}"
  rvm_ruby_repo_branch="${branch_name:-}"
  rvm_ruby_name="$ruby_name"

  strings=()
  __rvm_custom_separated_array strings - "${ruby_string}"

  if
    (( ${#strings[@]} == 0 ))
  then
    if
      [[ "${GEM_HOME:-}" == *"${rvm_gems_path}"* ]]
    then
      # Current Ruby
      strings="${GEM_HOME##*\/}"
      strings="${strings/%${rvm_gemset_separator:-"@"}*}"
      rvm_ruby_string="$strings"
      strings=( $(echo ${rvm_ruby_string//-/ }) )
    else
      strings=(system)
      rvm_ruby_string="system"
    fi
  fi

  for string in ${strings[@]}
  do
    case "$string" in
      (head)
        rvm_ruby_patch_level=""
        rvm_ruby_revision=""
        rvm_ruby_tag=""
        export rvm_head_flag=1
        ;;

      (system)
        rvm_ruby_interpreter="system"
        rvm_ruby_patch_level=""
        rvm_ruby_tag=""
        rvm_ruby_revision=""
        rvm_ruby_version=""
        rvm_gemset_name=""
        rvm_head_flag=0
        return 0
        ;;

      (ext|external)
        rvm_ruby_interpreter="ext"
        rvm_ruby_patch_level=""
        rvm_ruby_tag=""
        rvm_ruby_revision=""
        rvm_ruby_version=""
        rvm_head_flag=0

        rvm_ruby_name="${ruby_string:-${rvm_ruby_string}}"
        rvm_ruby_name="${rvm_ruby_name#*-}"
        break
        ;;

      (nightly|weekly|monthly)
        case "${rvm_ruby_interpreter}" in
          (rbx|rubinius) rvm_ruby_patch_level="$string" ;;
          (*)            rvm_ruby_version="$string"     ;;
        esac
        rvm_nightly_flag=1
        ;;

      (nightly*|weekly*|monthly*)
        case "${rvm_ruby_interpreter}" in
          (rbx|rubinius) rvm_ruby_patch_level="$string" ;;
          (*)            rvm_ruby_version="$string"     ;;
        esac
        ;;

      (preview*)
        rvm_ruby_patch_level="$string"
        ;;

      (rc[[:digit:]]*)
        rvm_ruby_patch_level="$string"
        ;;

      ([[:digit:]].[[:digit:]]*|[[:digit:]][[:digit:]].[[:digit:]]*)
        #TODO: use normal code for rbx!
        if
          [[ "${rvm_ruby_interpreter}" == "rbx" || "${rvm_ruby_interpreter}" == "runinius" ]]
        then
          if
            [[ -z "${rvm_ruby_version}" ]]
          then
            rvm_ruby_version="${string}"
          elif
            [[ -z "${rvm_ruby_patch_level}" ]]
          then
            rvm_ruby_patch_level="${string}"
          else
            rvm_error "Unknown ruby interpreter string component: '$string'."
            return 1
          fi
        else
          case "$string" in
            (1.8) rvm_ruby_version="$string.7" ;;
            (1.9) rvm_ruby_version="$string.3" ;;
            (2.0) rvm_ruby_version="$string.0" ;;

            (0.+([[:digit:]])|0.+([[:digit:]]).+([[:digit:]])|1.+([[:digit:]]).+([[:digit:]])|2.+([[:digit:]]).+([[:digit:]])|1.+([[:digit:]]).+([[:digit:]]).+([[:digit:]])|1.+([[:digit:]]))
              rvm_ruby_version="$string"
              ;;

            (1.+([[:digit:]]).+([[:digit:]]).+([[:alnum:]]))
              case "${rvm_ruby_interpreter:-""}" in
                (jruby)
                  rvm_ruby_version="$string"
                  ;;
                (*)
                  rvm_error "Unknown ruby interpreter version: '$string'."
                  return 1
                  ;;
              esac
              ;;

            (*)
              rvm_error "Unknown ruby interpreter version: '$string'."
              return 1
              ;;
          esac
          rvm_ruby_revision=""
          rvm_ruby_tag=""
        fi
        ;;

      (p[[:digit:]]*)
        rvm_ruby_patch_level="$string"
        ;;

      ([[:digit:]][[:digit:]]*)

        case "${rvm_ruby_interpreter:-""}" in
          (ree)
            rvm_ruby_patch_level="$string"
            rvm_ruby_revision=""
            ;;

          (kiji)
            rvm_ruby_patch_level="$string"
            rvm_ruby_revision=""
            ;;

          (rbx)
            rvm_ruby_patch_level="$string"
            ;;

          (maglev)
            rvm_ruby_version="$string"
            rvm_ruby_revision=""
            rvm_ruby_patch_level=""
            ;;

          (*)
            rvm_ruby_revision="r$string"
            ;;
        esac
        ;;

      (r[[:digit:]]*)
        rvm_ruby_patch_level=""
        rvm_ruby_revision="$string"
        ;;

      (s[[:alnum:]]*)
        rvm_ruby_revision=""
        rvm_ruby_sha="${string#s}"
        ;;

      (tv[[:digit:]]*|t[[:digit:]]*)
        rvm_ruby_patch_level="" ; rvm_ruby_revision=""
        rvm_ruby_tag="$string"
        ;;

      (m[[:digit:]]*)
        rvm_ruby_mode="$string"
        ;;

      (u[[:alnum:]]*)
        rvm_ruby_patch_level="" ; rvm_ruby_revision="" ; rvm_ruby_tag="" ; rvm_ruby_patch=""
        rvm_ruby_user_tag="$string"
        ;;

      (a[[:digit:]][[:digit:]]*)
        rvm_ruby_bits="$string" # Architecture
        ;;

      (b[[:digit:]]*)
        rvm_ruby_repo_branch="${string}"
        rvm_head_flag=1
        ;;

      (rubinius)
        rvm_ruby_interpreter="rbx"
        ;;

      (opal|ruby|rbx|jruby|macruby|ree|kiji|maglev|ironruby|goruby|mruby|tcs|jamesgolick|topaz)
        rvm_ruby_interpreter="$string"
        ;;

      ([[:alpha:]]*([[:alnum:]]|_))
        rvm_ruby_name="$string"
        ;;

      (*)
        rvm_error "Unknown ruby interpreter string component: '$string'."
        return 1
        ;;
    esac
  done
  true # OSX --trace FIX
}
